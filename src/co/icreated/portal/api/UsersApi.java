/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package co.icreated.portal.api;

import co.icreated.portal.model.CommonStringDto;
import co.icreated.portal.model.PasswordDto;
import co.icreated.portal.model.UserDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Users", description = "Operations about users")
public interface UsersApi {

  /**
   * POST /users/password/change : Change password Change password
   *
   * @param passwordDto Change password (required)
   * @return OK (status code 200) or Precondition Failed (status code 412) or Internal Server Error
   *         (status code 500)
   */
  @Operation(operationId = "changePassword", summary = "Change password", tags = {"users"},
      responses = {
          @ApiResponse(responseCode = "200", description = "OK",
              content = {@Content(mediaType = "application/json",
                  schema = @Schema(implementation = UserDto.class))}),
          @ApiResponse(responseCode = "412", description = "Precondition Failed"),
          @ApiResponse(responseCode = "500", description = "Internal Server Error")})
  @RequestMapping(method = RequestMethod.POST, value = "/users/password/change",
      produces = {"application/json"}, consumes = {"application/json"})
  ResponseEntity<UserDto> changePassword(
      @Parameter(name = "PasswordDto", description = "Change password", required = true) @Valid
      @RequestBody PasswordDto passwordDto);


  /**
   * POST /users/password/emaillink : Send email link Send email link
   *
   * @param commonStringDto Token (required)
   * @return OK (status code 200) or Precondition Failed (status code 412) or Internal Server Error
   *         (status code 500)
   */
  @Operation(operationId = "sendEmailLink", summary = "Send email link", tags = {"users"},
      responses = {@ApiResponse(responseCode = "200", description = "OK"),
          @ApiResponse(responseCode = "412", description = "Precondition Failed"),
          @ApiResponse(responseCode = "500", description = "Internal Server Error")})
  @RequestMapping(method = RequestMethod.POST, value = "/users/password/emaillink",
      consumes = {"application/json"})
  ResponseEntity<Void> sendEmailLink(
      @Parameter(name = "CommonStringDto", description = "Token", required = true) @Valid
      @RequestBody CommonStringDto commonStringDto);


  /**
   * POST /users/password/validate : Validate token Validate token
   *
   * @param passwordDto Validate new password (required)
   * @return OK (status code 200) or Precondition Failed (status code 412) or Internal Server Error
   *         (status code 500)
   */
  @Operation(operationId = "validateToken", summary = "Validate token", tags = {"users"},
      responses = {@ApiResponse(responseCode = "200", description = "OK"),
          @ApiResponse(responseCode = "412", description = "Precondition Failed"),
          @ApiResponse(responseCode = "500", description = "Internal Server Error")})
  @RequestMapping(method = RequestMethod.POST, value = "/users/password/validate",
      consumes = {"application/json"})
  ResponseEntity<Void> validateToken(
      @Parameter(name = "PasswordDto", description = "Validate new password", required = true)
      @Valid @RequestBody PasswordDto passwordDto);

}

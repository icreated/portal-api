/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package co.icreated.portal.api.service;

import co.icreated.portal.api.model.CommonStringDto;
import co.icreated.portal.api.model.ForgottenPasswordDto;
import co.icreated.portal.api.model.PasswordDto;
import co.icreated.portal.api.model.UserDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Users", description = "Operations about users")
public interface UsersApi {

    /**
     * POST /users/email/token : Send email token
     * Send email with a token to reset password
     *
     * @param commonStringDto User mail to send link (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "sendEmailToken",
        summary = "Send email token",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/email/token",
        consumes = { "application/json" }
    )
    ResponseEntity<Void> sendEmailToken(
        @Parameter(name = "CommonStringDto", description = "User mail to send link", required = true) @Valid @RequestBody CommonStringDto commonStringDto
    );


    /**
     * PUT /users/password/{token} : Update forgotten password
     * Update forgotten password with given token
     *
     * @param token Token given by email (required)
     * @param forgottenPasswordDto Password object (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "updateForgottenPassword",
        summary = "Update forgotten password",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/users/password/{token}",
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateForgottenPassword(
        @Parameter(name = "token", description = "Token given by email", required = true) @PathVariable("token") String token,
        @Parameter(name = "ForgottenPasswordDto", description = "Password object", required = true) @Valid @RequestBody ForgottenPasswordDto forgottenPasswordDto
    );


    /**
     * POST /users/password : Update password
     * Update password of current user
     *
     * @param passwordDto Password object (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "updatePassword",
        summary = "Update password",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "404", description = "Not Found"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/password",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UserDto> updatePassword(
        @Parameter(name = "PasswordDto", description = "Password object", required = true) @Valid @RequestBody PasswordDto passwordDto
    );

}
